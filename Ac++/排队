#include<iostream>
#include<malloc.h>
#include<string>
#define MaxSize 3
using namespace std;
typedef int ElemType;
typedef struct Lnode
{
	char data[10];
	struct Lnode * next;
}QType;
typedef struct
{
	QType * front;
	QType * rear;
}LQueue;

//-----初始化队列运算-----
void InitQueue(LQueue *&lq)
{
	lq = (LQueue *)malloc(sizeof(LQueue));
	lq -> rear = lq -> front = NULL;
}
//-----销毁队列-----
void DestroyQueue(LQueue *&lq)
{
	QType *pre = lq -> front,*p;
	if(pre!=NULL)
	{
		if(pre == lq->rear)
		{
			free(pre);
			}
		else 
		{
			p = pre ->next;
			while(p!=NULL){
				free(pre);
				pre = p;p = p->next;
			}
			free(pre);
		}
		
	}
	free(pre);
}
//-----进队运算算法-----
void EnQueue(LQueue *&lq,char x[])
{
	QType *s;
	s = (QType *)malloc(sizeof(QType));
	strcpy(s->data,x);
//lq->rear->total+=s->total;
	s->next = NULL;
	if(lq -> front == NULL)
		lq ->rear = lq->front = s;
	else
	{
		lq->rear->next = s;
		lq->rear= s;
}
}
//-----出队运算-----
int DeQueue(LQueue *&lq,char x[]){
	QType *p;
	if(lq->front==NULL)
		return 0;
	p=lq->front;
	strcpy(x,p->data);
	if(lq->rear == lq->front){
		lq->rear= lq->front = NULL;
	}
	else{
		lq->front = lq->front->next;
		free(p);
	}
	return 1;
}
//----判断队空运算算法----
int QueueEmpty(LQueue *lq)
{
	if(lq->front == NULL) return 1;
	else return 0;
}
//----输出队中所有元素-----
int DispQueue(LQueue *&lq)
{
		QType *p;
	if(QueueEmpty(lq)) return 0;
	else{
		p= lq->front;
		while(p!=NULL)
		{
			cout<<p->data<<" ";
			p=p->next;
		}
		cout<<endl;
		return 1;
	}
}
int main(){
	int sel,flag=1;
	char name[10];
	LQueue *lq;
	InitQueue(lq);
	while(flag==1){
		cout<<"1：排队  2：上车  3:排队查看  0：满人 \n"<<"请输入选择：";
		cin>>sel;
		switch(sel)
		{
		case 0:
			if(!QueueEmpty(lq))
				cout<<">>请排队的的学生等下一辆车。"<<endl;
			DestroyQueue(lq);
			flag=0;
			break;
		case 1:
			cout<<"请输入学生姓名：";
			cin>>name;
		EnQueue(lq,name);
			break;
		case 2:
			if(!DeQueue(lq,name))
				cout<<">>没有排队的学生"<<endl;
			else
				cout<<"学生 "<<name<<" 上车"<<endl;
			break;
		case 3:
			cout<<">>排队学生：";
			if(!DispQueue(lq))
				cout<<">>没有学生排队"<<endl;
			break;
		}
	}
}